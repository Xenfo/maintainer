{
  "master:types/dompurify/index.d.ts": "// Type definitions for DOM Purify 2.0\n// Project: https://github.com/cure53/DOMPurify\n// Definitions by: Dave Taylor https://github.com/davetayls\n//                 Samira Bazuzi <https://github.com/bazuzi>\n//                 FlowCrypt <https://github.com/FlowCrypt>\n//                 Exigerr <https://github.com/Exigerr>\n//                 Piotr Błażejewicz <https://github.com/peterblazejewicz>\n// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped\n// TypeScript Version: 3.1\n/// <reference types=\"trusted-types\"/>\n\nexport as namespace DOMPurify;\nexport = DOMPurify;\n\ndeclare const DOMPurify: createDOMPurifyI;\n\ninterface createDOMPurifyI extends DOMPurify.DOMPurifyI {\n    (window?: Window): DOMPurify.DOMPurifyI;\n}\n\ndeclare namespace DOMPurify {\n    interface DOMPurifyI {\n        sanitize(source: string | Node): string;\n        sanitize(source: string | Node, config: Config & { RETURN_TRUSTED_TYPE: true, }): TrustedHTML;\n        sanitize(source: string | Node, config: Config & { RETURN_DOM_FRAGMENT?: false, RETURN_DOM?: false, }): string;\n        sanitize(source: string | Node, config: Config & { RETURN_DOM_FRAGMENT: true, }): DocumentFragment;\n        sanitize(source: string | Node, config: Config & { RETURN_DOM: true, }): HTMLElement;\n        sanitize(source: string | Node, config: Config): string | HTMLElement | DocumentFragment;\n\n        addHook(hook: 'uponSanitizeElement', cb: (currentNode: Element, data: SanitizeElementHookEvent, config: Config) => void): void;\n        addHook(hook: 'uponSanitizeAttribute', cb: (currentNode: Element, data: SanitizeAttributeHookEvent, config: Config) => void): void;\n        addHook(hook: HookName, cb: (currentNode: Element, data: HookEvent, config: Config) => void): void;\n\n        setConfig(cfg: Config): void;\n        clearConfig(): void;\n        isValidAttribute(tag: string, attr: string, value: string): boolean;\n\n        removeHook(entryPoint: HookName): void;\n        removeHooks(entryPoint: HookName): void;\n        removeAllHooks(): void;\n\n        version: string;\n        removed: any[];\n        isSupported: boolean;\n    }\n\n    interface Config {\n        ADD_ATTR?: string[];\n        ADD_DATA_URI_TAGS?: string[];\n        ADD_TAGS?: string[];\n        ALLOW_DATA_ATTR?: boolean;\n        ALLOWED_ATTR?: string[];\n        ALLOWED_TAGS?: string[];\n        FORBID_ATTR?: string[];\n        FORBID_TAGS?: string[];\n        FORCE_BODY?: boolean;\n        KEEP_CONTENT?: boolean;\n        RETURN_DOM?: boolean;\n        RETURN_DOM_FRAGMENT?: boolean;\n        RETURN_DOM_IMPORT?: boolean;\n        RETURN_TRUSTED_TYPE?: boolean;\n        SAFE_FOR_JQUERY?: boolean;\n        SANITIZE_DOM?: boolean;\n        WHOLE_DOCUMENT?: boolean;\n        ALLOWED_URI_REGEXP?: RegExp;\n        SAFE_FOR_TEMPLATES?: boolean;\n        ALLOW_UNKNOWN_PROTOCOLS?: boolean;\n        USE_PROFILES?: false | { mathMl?: boolean, svg?: boolean, svgFilters?: boolean, html?: boolean };\n        IN_PLACE?: boolean;\n    }\n\n    type HookName\n        = 'beforeSanitizeElements'\n        | 'uponSanitizeElement'\n        | 'afterSanitizeElements'\n        | 'beforeSanitizeAttributes'\n        | 'uponSanitizeAttribute'\n        | 'afterSanitizeAttributes'\n        | 'beforeSanitizeShadowDOM'\n        | 'uponSanitizeShadowNode'\n        | 'afterSanitizeShadowDOM';\n\n    type HookEvent\n        = SanitizeElementHookEvent\n        | SanitizeAttributeHookEvent\n        | null;\n\n    interface SanitizeElementHookEvent {\n        tagName: string;\n        allowedTags: { [key: string]: boolean };\n    }\n\n    interface SanitizeAttributeHookEvent {\n        attrName: string;\n        attrValue: string;\n        keepAttr: boolean;\n        allowedAttributes: { [key: string]: boolean };\n    }\n}\n"
}